<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DevicesLowLevelContract</name>
  </assembly>
  <members>
    <member name="T:Windows.Devices.DevicesLowLevelContract">
      <summary>
      </summary>
    </member>
    <member name="T:Windows.Devices.ILowLevelDevicesAggregateProvider">
      <summary>表示对所有低级别设备聚合提供程序通用的属性。</summary>
    </member>
    <member name="P:Windows.Devices.ILowLevelDevicesAggregateProvider.AdcControllerProvider">
      <summary>获取默认的 ADC 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>ADC 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.ILowLevelDevicesAggregateProvider.GpioControllerProvider">
      <summary>获取默认的 GPIO 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>GPIO 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.ILowLevelDevicesAggregateProvider.I2cControllerProvider">
      <summary>获取 &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序的默认 I。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.ILowLevelDevicesAggregateProvider.PwmControllerProvider">
      <summary>获取默认的 PWM 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>PWM 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.ILowLevelDevicesAggregateProvider.SpiControllerProvider">
      <summary>获取默认的 SPI 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>SPI 提供程序。</returns>
    </member>
    <member name="T:Windows.Devices.LowLevelDevicesAggregateProvider">
      <summary>表示低端总线设备提供程序。此类提供对低端总线控制器的默认提供程序的访问权限。</summary>
    </member>
    <member name="M:Windows.Devices.LowLevelDevicesAggregateProvider.#ctor(Windows.Devices.Adc.Provider.IAdcControllerProvider,Windows.Devices.Pwm.Provider.IPwmControllerProvider,Windows.Devices.Gpio.Provider.IGpioControllerProvider,Windows.Devices.I2c.Provider.II2cControllerProvider,Windows.Devices.Spi.Provider.ISpiControllerProvider)">
      <summary>创建 LowLevelDevicesAggregateProvider 的实例，并将提供的提供程序设置为各自总线的默认值。</summary>
      <param name="adc">ADC 提供程序。</param>
      <param name="pwm">PWM 提供程序。</param>
      <param name="gpio">GPIO 提供程序。</param>
      <param name="i2c">I &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序。</param>
      <param name="spi">SPI 提供程序。</param>
    </member>
    <member name="P:Windows.Devices.LowLevelDevicesAggregateProvider.AdcControllerProvider">
      <summary>获取默认的 ADC 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>ADC 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.LowLevelDevicesAggregateProvider.GpioControllerProvider">
      <summary>获取默认的 GPIO 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>GPIO 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.LowLevelDevicesAggregateProvider.I2cControllerProvider">
      <summary>获取 &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序的默认 I。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.LowLevelDevicesAggregateProvider.PwmControllerProvider">
      <summary>获取默认的 PWM 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>PWM 提供程序。</returns>
    </member>
    <member name="P:Windows.Devices.LowLevelDevicesAggregateProvider.SpiControllerProvider">
      <summary>获取默认的 SPI 提供程序。如果未显式设置默认提供程序，则它将回退到正常的驱动程序/控制器。</summary>
      <returns>SPI 提供程序。</returns>
    </member>
    <member name="T:Windows.Devices.LowLevelDevicesController">
      <summary>表示低端总线设备控制器及其关联的提供程序。</summary>
    </member>
    <member name="P:Windows.Devices.LowLevelDevicesController.DefaultProvider">
      <summary>获取或设置控制器的默认提供程序。</summary>
      <returns>设备聚合提供程序。</returns>
    </member>
    <member name="T:Windows.Devices.Adc.AdcChannel">
      <summary>表示单个 ADC 通道。</summary>
    </member>
    <member name="P:Windows.Devices.Adc.AdcChannel.Controller">
      <summary>获取此通道的 ADC 控制器。</summary>
      <returns>ADC 控制器。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.AdcChannel.Close">
      <summary>关闭此通道上的连接，使其可供其他人打开。</summary>
    </member>
    <member name="M:Windows.Devices.Adc.AdcChannel.ReadRatio">
      <summary>将值读取为此控制器可能的最大值的百分比。</summary>
      <returns>以最大值的百分比表示的值。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.AdcChannel.ReadValue">
      <summary>从 ADC 读取模拟值的数字表示形式。</summary>
      <returns>数字值。</returns>
    </member>
    <member name="T:Windows.Devices.Adc.AdcChannelMode">
      <summary>介绍 ADC 控制器可用于输入的通道模式。</summary>
    </member>
    <member name="F:Windows.Devices.Adc.AdcChannelMode.Differential">
      <summary>两个插针之间的差异。</summary>
    </member>
    <member name="F:Windows.Devices.Adc.AdcChannelMode.SingleEnded">
      <summary>特定 pin 的简单值。</summary>
    </member>
    <member name="T:Windows.Devices.Adc.AdcController">
      <summary>表示系统上的 ADC 控制器</summary>
    </member>
    <member name="P:Windows.Devices.Adc.AdcController.ChannelCount">
      <summary>ADC 控制器上可用的通道数。</summary>
      <returns>通道数。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.AdcController.ChannelMode">
      <summary>获取或设置 ADC 控制器的通道模式。</summary>
      <returns>ADC 通道模式。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.AdcController.MaxValue">
      <summary>获取控制器可以报告的最大值。</summary>
      <returns>最大值。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.AdcController.MinValue">
      <summary>控制器可以报告的最小值。</summary>
      <returns>最小值。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.AdcController.ResolutionInBits">
      <summary>获取控制器的分辨率（以它拥有的位数为单位）。例如，如果有一个10位 ADC，这意味着它可以检测到1024（2 ^ 10）个离散级别。</summary>
      <returns>ADC 控制器具有的位数。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.AdcController.GetControllersAsync(Windows.Devices.Adc.Provider.IAdcProvider)">
      <summary>获取以异步方式连接到系统的所有控制器。</summary>
      <param name="provider">系统上控制器的 ADC 提供程序。</param>
      <returns>如果方法成功完成，它将返回一个值列表，这些值表示系统上可用的控制器。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.AdcController.GetDefaultAsync">
      <summary>获取系统上的默认 ADC 控制器。</summary>
      <returns>系统上的默认 ADC 控制器，如果系统没有 ADC 控制器，则为 null。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.AdcController.IsChannelModeSupported(Windows.Devices.Adc.AdcChannelMode)">
      <summary>验证控制器是否支持指定的通道模式。</summary>
      <param name="channelMode">通道模式。</param>
      <returns>如果支持指定的通道模式，则为 True; 否则为 false。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.AdcController.OpenChannel(System.Int32)">
      <summary>打开与指定 ADC 通道的连接。</summary>
      <param name="channelNumber">要连接到的通道。</param>
      <returns>ADC 通道。</returns>
    </member>
    <member name="T:Windows.Devices.Adc.Provider.IAdcControllerProvider">
      <summary>表示所有 ADC 控制器共有的属性和方法。</summary>
    </member>
    <member name="P:Windows.Devices.Adc.Provider.IAdcControllerProvider.ChannelCount">
      <summary>获取控制器上可用的通道数。</summary>
      <returns>通道数。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.Provider.IAdcControllerProvider.ChannelMode">
      <summary>获取或设置控制器通道模式。</summary>
      <returns>通道模式。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.Provider.IAdcControllerProvider.MaxValue">
      <summary>获取控制器可返回的最大值。</summary>
      <returns>最大值。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.Provider.IAdcControllerProvider.MinValue">
      <summary>获取控制器可返回的最小值。</summary>
      <returns>最小值。</returns>
    </member>
    <member name="P:Windows.Devices.Adc.Provider.IAdcControllerProvider.ResolutionInBits">
      <summary>获取控制器的分辨率（以它拥有的位数为单位）。</summary>
      <returns>用位数表示的分辨率。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.Provider.IAdcControllerProvider.AcquireChannel(System.Int32)">
      <summary>获取到指定通道的连接。</summary>
      <param name="channel">要连接到的通道。</param>
    </member>
    <member name="M:Windows.Devices.Adc.Provider.IAdcControllerProvider.IsChannelModeSupported(Windows.Devices.Adc.Provider.ProviderAdcChannelMode)">
      <summary>确定控制器是否支持指定的通道模式。</summary>
      <param name="channelMode">所涉及的通道模式。</param>
      <returns>如果支持指定的通道模式，则为 True; 否则为 false。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.Provider.IAdcControllerProvider.ReadValue(System.Int32)">
      <summary>获取指定通道上的模拟值的数字表示形式。</summary>
      <param name="channelNumber">要从中读取的通道。</param>
      <returns>模拟值的数字表示形式。</returns>
    </member>
    <member name="M:Windows.Devices.Adc.Provider.IAdcControllerProvider.ReleaseChannel(System.Int32)">
      <summary>释放通道连接，打开该通道供其他人使用。</summary>
      <param name="channel">要关闭与哪个通道的连接。</param>
    </member>
    <member name="T:Windows.Devices.Adc.Provider.IAdcProvider">
      <summary>表示对所有 ADC 提供程序通用的方法。</summary>
    </member>
    <member name="M:Windows.Devices.Adc.Provider.IAdcProvider.GetControllers">
      <summary>获取系统上可用的 ADC 控制器。</summary>
      <returns>此方法完成时，将返回系统上所有可用控制器的列表。</returns>
    </member>
    <member name="T:Windows.Devices.Adc.Provider.ProviderAdcChannelMode">
      <summary>确定如何表示 pin 值。具体的实现由提供程序决定，因此差异可能是完全或伪差异。</summary>
    </member>
    <member name="F:Windows.Devices.Adc.Provider.ProviderAdcChannelMode.Differential">
      <summary>两个插针之间的差异。</summary>
    </member>
    <member name="F:Windows.Devices.Adc.Provider.ProviderAdcChannelMode.SingleEnded">
      <summary>特定 pin 的简单值。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioChangeCount">
      <summary>表示 pin 更改值的次数的几乎并行采样，以及采样此计数的时间。此结构可用于确定一段时间内的 pin 值更改次数。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangeCount.Count">
      <summary>GpioChangeCounter 指定的极性转换在 pin 上出现的次数。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangeCount.RelativeTime">
      <summary>采样此计数的时间。将时间接近（但不是同时）计数。此时间戳可用于确定两个 GpioChangeCount 记录之间经过的时间。它与任何绝对或系统时间都不对应。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioChangeCounter">
      <summary>计算常规用途 i/o （GPIO） pin 上指定极性的变化。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeCounter.#ctor(Windows.Devices.Gpio.GpioPin)">
      <summary>创建与指定的 pin 关联的新 GpioChangeCounter。在任意给定时间，只能有一个 GpioChangeCounter 与一个 pin 相关联。</summary>
      <param name="pin">要对其进行计数更改的 pin。此 pin 必须已在独占模式下打开，不能与另一个 GpioChangeCounter 关联。</param>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeCounter.IsStarted">
      <summary>获取 pin 更改计数当前是否处于活动状态。</summary>
      <returns>
      </returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeCounter.Polarity">
      <summary>获取或设置将进行计数的转换的极性。仅当未启动 pin 计数时，才能更改极性。</summary>
      <returns>
      </returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeCounter.Close">
      <summary>关闭更改计数器，并将其与其 pin 解除关联。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeCounter.Read">
      <summary>读取极性更改的当前计数。计数开始之前，将返回0。</summary>
      <returns>包含计数和关联时间戳的 GpioChangeCount 结构。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeCounter.Reset">
      <summary>将计数重置为0，并返回以前的计数。</summary>
      <returns>包含计数和关联时间戳的 GpioChangeCount 结构。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeCounter.Start">
      <summary>开始计算引脚极性中的更改。仅当更改计数尚未处于活动状态时，才能调用此方法。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeCounter.Stop">
      <summary>停止计算引脚极性的变化。仅当更改计数当前处于活动状态时，才能调用此方法。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioChangePolarity">
      <summary>表示与相关联的操作相关的更改的极性。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangePolarity.Both">
      <summary>从低到高、从高到低的转换应触发关联的操作。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangePolarity.Falling">
      <summary>从高到低的转换应触发关联的操作。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangePolarity.Rising">
      <summary>从低到高的转换应触发关联的操作。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioChangeReader">
      <summary>表示内核模式和用户模式间的共享循环缓冲区，在此模式下，当常规用途 i/o （GPIO）固定值改变时，将在该模式下放置高分辨率时间戳。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.#ctor(Windows.Devices.Gpio.GpioPin)">
      <summary>创建与指定的 pin 关联的新 GpioChangeReader。在任意给定时间，只能有一个 GpioChangeReader 与一个 pin 相关联。</summary>
      <param name="pin">要在其上读取更改的 pin。必须已在独占模式下打开 pin，且不能与其他更改读取器关联。</param>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.#ctor(Windows.Devices.Gpio.GpioPin,System.Int32)">
      <summary>创建一个新的 GpioChangeReader，它与指定的 pin 相关联，并具有指定的更改记录的最小容量。在任意给定时间，只能有一个 GpioChangeReader 与一个 pin 相关联。</summary>
      <param name="pin">要在其上读取更改的 pin。必须已在独占模式下打开 pin，且不能与其他更改读取器关联。</param>
      <param name="minCapacity">读取器必须能够保存的最小更改记录数。</param>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeReader.Capacity">
      <summary>获取 GpioChangeReader 可以一次存储的最大更改记录数。</summary>
      <returns>更改记录的最大数目。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeReader.IsEmpty">
      <summary>获取读取器中当前是否有零个更改记录。</summary>
      <returns>如果读取器中有零个更改项，则返回 true; 否则返回 false。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeReader.IsOverflowed">
      <summary>获取将更改记录置于读取器缓冲区中的尝试是否因缓冲区已满而失败。</summary>
      <returns>如果放置尝试失败，则返回 true; 否则返回 false。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeReader.IsStarted">
      <summary>获取固定更改录制当前是否处于活动状态。</summary>
      <returns>如果当前正在记录 pin 更改，则返回 true; 否则返回 false。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeReader.Length">
      <summary>获取当前在更改读取器中的记录数。</summary>
      <returns>当前的更改记录数。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioChangeReader.Polarity">
      <summary>获取或设置要记录的转换的极性。仅当未启动固定更改记录时，才能更改极性。</summary>
      <returns>上升或下降。默认极性值正在下降。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.Clear">
      <summary>丢弃读取器的缓冲区中的所有更改记录。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.Close">
      <summary>关闭更改读取器，释放关联的内存缓冲区，并从其 pin 解除读取器关联。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.GetAllItems">
      <summary>删除并返回读取器的缓冲区中的所有当前项。</summary>
      <returns>IVector &lt; GpioChangeRecord &gt;</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.GetNextItem">
      <summary>从读取器的缓冲区中检索并删除最早插入的更改记录。</summary>
      <returns>GpioChangeRecord 结构，包含更改的时间戳和极性（上升或下降）。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.PeekNextItem">
      <summary>从读取器的缓冲区中检索先前插入的更改记录，而不将其移除。</summary>
      <returns>GpioChangeRecord 结构，包含更改的时间戳和极性（上升或下降）。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.Start">
      <summary>开始在 pin 极性中记录更改。仅当更改录制尚未处于活动状态时，才能调用此方法。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.Stop">
      <summary>停止记录引脚极性中的更改。仅当更改录制当前处于活动状态时，才能调用此方法。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioChangeReader.WaitForItemsAsync(System.Int32)">
      <summary>等待缓冲区至少用 * count * 项的数量填充，此时异步操作将完成。此操作可取消。</summary>
      <param name="count">在异步操作完成之前，缓冲区必须填充的项数。</param>
      <returns>
      </returns>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioChangeRecord">
      <summary>存储常规用途 i/o （GPIO）固定值更改的相对 timestap，以及 pin 是从低到高还是从高到低。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangeRecord.Edge">
      <summary>对应于转换类型的 GpioPinEdge 对象。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioChangeRecord.RelativeTime">
      <summary>一个相对时间戳，可用于确定两个更改记录之间的时间差。此时间戳与任何绝对或系统时间都不对应。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioController">
      <summary>表示系统的默认常规用途 i/o （GPIO）控制器。</summary>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioController.PinCount">
      <summary>获取常规用途 i/o （GPIO）控制器上的 pin 数目。</summary>
      <returns>GPIO 控制器上的 pin 数目。某些 pin 在用户模式下可能不可用。有关 pin 号如何对应于物理 pin 的信息，请参阅你的电路板的文档。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioController.GetControllersAsync(Windows.Devices.Gpio.Provider.IGpioProvider)">
      <summary>获取以异步方式连接到系统的所有控制器。</summary>
      <param name="provider">系统上控制器的 GPIO 提供程序。</param>
      <returns>如果方法成功完成，它将返回一个值列表，这些值表示系统上可用的控制器。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioController.GetDefault">
      <summary>获取系统的默认常规用途 i/o （GPIO）控制器。</summary>
      <returns>系统的默认 GPIO 控制器，如果系统没有 GPIO 控制器，则为 null。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioController.GetDefaultAsync">
      <summary>获取系统的默认常规用途 i/o （GPIO）控制器。</summary>
      <returns>系统的默认 GPIO 控制器，如果系统没有 GPIO 控制器，则为 null。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioController.OpenPin(System.Int32)">
      <summary>以独占模式打开与指定的常规用途 i/o （GPIO） pin 的连接。</summary>
      <param name="pinNumber">要打开的 GPIO pin 的 pin 号。Pin 号必须为</param>
      <returns>打开的 GPIO pin。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioController.OpenPin(System.Int32,Windows.Devices.Gpio.GpioSharingMode)">
      <summary>在指定的模式中打开指定的常规用途 i/o （GPIO） pin。</summary>
      <param name="pinNumber">要打开的 GPIO pin 的 pin 号。Pin 号必须为</param>
      <param name="sharingMode">要在其中打开 GPIO pin 的模式，该 pin 确定在打开 pin 的情况下是否可以打开与 pin 的其他连接。</param>
      <returns>打开的 GPIO pin。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioController.TryOpenPin(System.Int32,Windows.Devices.Gpio.GpioSharingMode,Windows.Devices.Gpio.GpioPin@,Windows.Devices.Gpio.GpioOpenStatus@)">
      <summary>在指定的模式中打开指定的常规用途 i/o （GPIO） pin，并获取一个状态值，您可以使用该状态值以编程方式打开 pin。</summary>
      <param name="pinNumber">要打开的 GPIO pin 的 pin 号。某些 pin 在用户模式下可能不可用。有关 pin 号如何对应于物理 pin 的信息，请参阅你的电路板的文档。</param>
      <param name="sharingMode">要在其中打开 GPIO pin 的模式，该 pin 确定在打开 pin 的情况下是否可以打开与 pin 的其他连接。</param>
      <param name="pin">如果返回值为 true，则打开的 GPIO pin;否则为 null。</param>
      <param name="openStatus">一个枚举值，该值指示尝试打开 GPIO pin 是成功的，还是尝试打开 GPIO pin 的原因失败。</param>
      <returns>如果方法成功打开了 pin，则为 True;否则为 false。</returns>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioOpenStatus">
      <summary>描述使用 GpioController. TryOpenPin 方法打开 pin 可能产生的结果。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioOpenStatus.MuxingConflict">
      <summary>当前为其他功能打开了 pin，如 * * I2c * *、* * Spi * * 或 * * UART * *。确保另一个函数未使用该 pin。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioOpenStatus.PinOpened">
      <summary>GPIO pin 已成功打开。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioOpenStatus.PinUnavailable">
      <summary>Pin 由系统保留，不适用于在用户模式下运行的应用。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioOpenStatus.SharingViolation">
      <summary>该 pin 当前在不兼容的共享模式下打开。例如：</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioOpenStatus.UnknownError">
      <summary>无法打开 pin。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioPin">
      <summary>表示常规用途 i/o （GPIO） pin。</summary>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioPin.DebounceTimeout">
      <summary>获取或设置常规用途 i/o （GPIO） pin 的反应超时值，这是一段时间间隔，在此时间间隔内对 pin 值的更改将被筛选出来，并且不生成 ValueChanged 事件。</summary>
      <returns>GPIO pin 的反应反超时（类型为 TimeSpan）。如果此间隔的长度为0，则对该 pin 值的所有更改都会生成 ValueChanged 事件。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioPin.PinNumber">
      <summary>获取常规用途 i/o （GPIO） pin 的 pin 号。</summary>
      <returns>GPIO pin 的 pin 号。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioPin.SharingMode">
      <summary>获取用于打开常规用途 i/o （GPIO） pin 的共享模式。</summary>
      <returns>GPIO pin 处于打开状态的共享模式。</returns>
    </member>
    <member name="E:Windows.Devices.Gpio.GpioPin.ValueChanged">
      <summary>在以下情况下发生：当将 pin 配置为输入时，在将固定用途 i/o （GPIO）固定的值更改时，或者在配置为输出时将值写入 pin。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioPin.Close">
      <summary>关闭常规用途 i/o （GPIO） pin 并释放与其关联的资源。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioPin.GetDriveMode">
      <summary>获取用于常规用途 i/o （GPIO） pin 的当前驱动器模式。驱动器模式指定是否将 pin 配置为输入或输出，并确定如何将值驱动到 pin 上。</summary>
      <returns>一个枚举值，指示 GPIO pin 的当前驱动器模式。驱动器模式指定是否将 pin 配置为输入或输出，并确定如何将值驱动到 pin 上。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioPin.IsDriveModeSupported(Windows.Devices.Gpio.GpioPinDriveMode)">
      <summary>获取常规用途 i/o （GPIO） pin 是否支持指定的驱动器模式。</summary>
      <param name="driveMode">要检查是否支持的驱动器模式。</param>
      <returns>如果 GPIO pin 支持驱动器模式 * driveMode * 指定，则为 True;否则为 false。如果在调用 SetDriveMode 时指定了此方法为其返回 false 的驱动器模式，则 SetDriveMode 会生成一个异常。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioPin.Read">
      <summary>读取常规用途 i/o （GPIO） pin 的当前值。</summary>
      <returns>GPIO pin 的当前值。如果将 pin 配置为输出，则此值为写入到该 pin 的最后一个值。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioPin.SetDriveMode(Windows.Devices.Gpio.GpioPinDriveMode)">
      <summary>设置常规用途 i/o （GPIO） pin 的驱动器模式。驱动器模式指定是否将 pin 配置为输入或输出，并确定如何将值驱动到 pin 上。</summary>
      <param name="value">一个枚举值，该值指定用于 GPIO pin 的驱动器模式。驱动器模式指定是否将 pin 配置为输入或输出，并确定如何将值驱动到 pin 上。</param>
    </member>
    <member name="M:Windows.Devices.Gpio.GpioPin.Write(Windows.Devices.Gpio.GpioPinValue)">
      <summary>如果 pin 配置为输出，则根据 pin 的当前驱动器模式，将指定的值驱动到常规用途 i/o （GPIO）固定，如果将 pin 配置为输入，则会更新 pin 的锁定输出值。</summary>
      <param name="value">要写入 GPIO pin 的枚举值。</param>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioPinDriveMode">
      <summary>描述是否将常规用途 i/o （GPIO） pin 配置为输入或输出，以及如何将值驱动到 pin 上。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.Input">
      <summary>在浮动模式下配置 GPIO pin，具有高阻抗。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.InputPullDown">
      <summary>将 GPIO pin 配置为高度阻抗，并向下拉出电阻器到地面。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.InputPullUp">
      <summary>使用向电压充电连接（VCC）提供的拉电阻，将 GPIO pin 配置为高度阻抗。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.Output">
      <summary>在强驱动器模式下配置 GPIO pin，但阻抗较低。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.OutputOpenDrain">
      <summary>在开放排出模式下配置 GPIO。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.OutputOpenDrainPullUp">
      <summary>用电阻式拉入模式配置开放排出模式下的 GPIO pin。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.OutputOpenSource">
      <summary>在打开收集器模式下配置 GPIO pin。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinDriveMode.OutputOpenSourcePullDown">
      <summary>在开放收集器模式下用电阻式下拉模式配置 GPIO pin。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioPinEdge">
      <summary>介绍可能发生的更改类型，这些更改可能会在 GpioPin. ValueChanged 事件的常规用途 i/o （GPIO） pin 的值上发生。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinEdge.FallingEdge">
      <summary>GPIO pin 的值从 high 变为 low。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinEdge.RisingEdge">
      <summary>GPIO pin 的值从低到高更改。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioPinValue">
      <summary>描述常规用途 i/o （GPIO） pin 的可能值。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinValue.High">
      <summary>GPIO pin 的值较高。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioPinValue.Low">
      <summary>GPIO pin 的值较低。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioPinValueChangedEventArgs">
      <summary>提供有关在将 pin 配置为输入时，由于外部的激励因素导致的 GpioPin. ValueChanged 事件的数据，或者在配置为的 pin 时将值写入到 pin 中的情况下发生的事件一个输出。</summary>
    </member>
    <member name="P:Windows.Devices.Gpio.GpioPinValueChangedEventArgs.Edge">
      <summary>获取发生的更改类型，该更改发生在 GpioPin ValueChanged 事件的通用 i/o （GPIO） pin 的值上。</summary>
      <returns>一个枚举值，该值指示对 GpioPin ValueChanged 事件的 GPIO pin 值所发生的更改类型。</returns>
    </member>
    <member name="T:Windows.Devices.Gpio.GpioSharingMode">
      <summary>介绍可用于打开常规用途 i/o （GPIO） pin 的模式。这些模式确定在打开 pin 时是否可以打开与 GPIO pin 的其他连接。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioSharingMode.Exclusive">
      <summary>仅打开 GPIO pin，以便无法打开与该 pin 的任何其他连接。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.GpioSharingMode.SharedReadOnly">
      <summary>将 GPIO pin 打开为共享，以便可以将 * * SharedReadOnly * * 模式下的其他连接打开。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.GpioPinProviderValueChangedEventArgs">
      <summary>提供有关 IGpioPinProvider. ValueChanged 事件的信息。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.GpioPinProviderValueChangedEventArgs.#ctor(Windows.Devices.Gpio.Provider.ProviderGpioPinEdge)">
      <summary>用指定的边缘值 Contructs GpioPinProviderValueChangedEventArgs 类。</summary>
      <param name="edge">所需的 pin 边缘。</param>
    </member>
    <member name="P:Windows.Devices.Gpio.Provider.GpioPinProviderValueChangedEventArgs.Edge">
      <summary>获取此 pin 已更改为的值。</summary>
      <returns>Pin 边缘。</returns>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.IGpioControllerProvider">
      <summary>表示对所有常规用途 i/o （GPIO）控制器通用的操作。</summary>
    </member>
    <member name="P:Windows.Devices.Gpio.Provider.IGpioControllerProvider.PinCount">
      <summary>获取可用的通用 i/o （GPIO）针脚数。</summary>
      <returns>可用的 GPIO pin 的数目。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioControllerProvider.OpenPinProvider(System.Int32,Windows.Devices.Gpio.Provider.ProviderGpioSharingMode)">
      <summary>打开并返回特定 pin 的常规用途 i/o （GPIO）固定提供程序。</summary>
      <param name="pin">所需的 GPIO pin 号。</param>
      <param name="sharingMode">作为打开该 pin 的共享模式。</param>
      <returns>指定的 pin 的 GPIO 固定提供程序。</returns>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.IGpioPinProvider">
      <summary>表示通用于常规用途 i/o （GPIO）固定提供程序的操作。</summary>
    </member>
    <member name="P:Windows.Devices.Gpio.Provider.IGpioPinProvider.DebounceTimeout">
      <summary>获取或设置常规用途 i/o （GPIO） pin 的反跳超时值，在此时间间隔内，将筛选出对 pin 值的更改，并且不生成 ValueChanged 事件。</summary>
      <returns>GPIO pin 的反跳超时值，在此期间，将筛选出对 pin 值的更改，而不会生成 ValueChanged 事件。如果此间隔的长度为0，则对该 pin 值的所有更改都会生成 ValueChanged 事件。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.Provider.IGpioPinProvider.PinNumber">
      <summary>获取常规用途 i/o （GPIO） pin 的 pin 号。</summary>
      <returns>GPIO pin 的 pin 号。</returns>
    </member>
    <member name="P:Windows.Devices.Gpio.Provider.IGpioPinProvider.SharingMode">
      <summary>获取用于打开常规用途 i/o （GPIO） pin 的共享模式。</summary>
      <returns>GPIO pin 处于打开状态的共享模式。</returns>
    </member>
    <member name="E:Windows.Devices.Gpio.Provider.IGpioPinProvider.ValueChanged">
      <summary>Pin 值更改时触发的事件。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioPinProvider.GetDriveMode">
      <summary>获取此 pin 的当前配置驱动器模式。</summary>
      <returns>Pin 的驱动器模式。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioPinProvider.IsDriveModeSupported(Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode)">
      <summary>确定 pin 是否支持驱动器模式。</summary>
      <param name="driveMode">所需的驱动器模式。</param>
      <returns>如果支持驱动器模式，则为 True;否则为 false。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioPinProvider.Read">
      <summary>读取 pin 的当前值。</summary>
      <returns>Pin 的值。</returns>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioPinProvider.SetDriveMode(Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode)">
      <summary>设置 pin 的驱动器模式。</summary>
      <param name="value">Pin 所需的驱动器模式。</param>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioPinProvider.Write(Windows.Devices.Gpio.Provider.ProviderGpioPinValue)">
      <summary>向 pin 写入值。</summary>
      <param name="value">要写入的值。</param>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.IGpioProvider">
      <summary>表示通用于常规用途 i/o （GPIO）控制器提供程序的操作。</summary>
    </member>
    <member name="M:Windows.Devices.Gpio.Provider.IGpioProvider.GetControllers">
      <summary>获取系统上可用的控制器。</summary>
      <returns>值的列表，这些值表示系统上可用的控制器。</returns>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode">
      <summary>描述是否将常规用途 i/o （GPIO） pin 配置为输入或输出，以及如何将值驱动到 pin 上。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.Input">
      <summary>在浮动模式下配置 GPIO pin，具有高阻抗。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.InputPullDown">
      <summary>将 GPIO pin 配置为高度阻抗，并向下拉出电阻器到地面。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.InputPullUp">
      <summary>使用向电压充电连接（VCC）提供的拉电阻，将 GPIO pin 配置为高度阻抗。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.Output">
      <summary>在强驱动器模式下配置 GPIO pin，但阻抗较低。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.OutputOpenDrain">
      <summary>在开放排出模式下配置 GPIO。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.OutputOpenDrainPullUp">
      <summary>用电阻式拉入模式配置开放排出模式下的 GPIO pin。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.OutputOpenSource">
      <summary>在打开收集器模式下配置 GPIO pin。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode.OutputOpenSourcePullDown">
      <summary>在开放收集器模式下用电阻式下拉模式配置 GPIO pin。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.ProviderGpioPinEdge">
      <summary>描述可能发生的更改类型，这些更改可能会发生在常规用途 i/o （GPIO） pin 的值上。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinEdge.FallingEdge">
      <summary>下降边缘，或者值从高到低时为。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinEdge.RisingEdge">
      <summary>下边缘，或者值从低到高时。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.ProviderGpioPinValue">
      <summary>描述常规用途 i/o （GPIO） pin 的可能值。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinValue.High">
      <summary>GPIO pin 的值较高。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioPinValue.Low">
      <summary>GPIO pin 的值较低。</summary>
    </member>
    <member name="T:Windows.Devices.Gpio.Provider.ProviderGpioSharingMode">
      <summary>介绍可用于打开常规用途 i/o （GPIO） pin 的模式。这些模式确定在打开 pin 时是否可以打开与 GPIO pin 的其他连接。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioSharingMode.Exclusive">
      <summary>仅打开 GPIO pin，以便无法打开与该 pin 的任何其他连接。</summary>
    </member>
    <member name="F:Windows.Devices.Gpio.Provider.ProviderGpioSharingMode.SharedReadOnly">
      <summary>将 GPIO pin 打开为共享，以便可以将 * * SharedReadOnly * * 模式下的其他连接打开。只能执行不更改 pin 状态的操作。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.I2cBusSpeed">
      <summary>描述可用于连接到集成线路的总线速度（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备。总线速度是指在访问设备时，对 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线进行时钟的频率。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cBusSpeed.FastMode">
      <summary>速度为 400 kHz。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cBusSpeed.StandardMode">
      <summary>100千赫（kHz）的标准速度。此速度是默认值。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.I2cConnectionSettings">
      <summary>表示要用于集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的连接设置。</summary>
    </member>
    <member name="M:Windows.Devices.I2c.I2cConnectionSettings.#ctor(System.Int32)">
      <summary>使用 "总线速度" 和 "独占共享" 模式的 "标准" 模式的默认设置，创建并初始化 I2cConnectionSettings 类的新实例，以便使用指定的总线地址进行集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备.</summary>
      <param name="slaveAddress">要应用 I2cConnectionSettings 设置的集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的总线地址。仅支持7位寻址，因此有效的值范围是从8到119。</param>
    </member>
    <member name="P:Windows.Devices.I2c.I2cConnectionSettings.BusSpeed">
      <summary>获取或设置用于连接到集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的总线速度。总线速度是指在访问设备时，对 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线进行时钟的频率。</summary>
      <returns>用于连接到 anI &lt; sup &gt; 2 &lt;/sup &gt; C 设备的总线速度。</returns>
    </member>
    <member name="P:Windows.Devices.I2c.I2cConnectionSettings.SharingMode">
      <summary>获取或设置用于连接到集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线地址的共享模式。此模式确定连接到 I &lt; sup &gt; &lt; &gt;/sup 时，是否可以打开与 I &lt; sup &gt; 2 &lt; &gt;/sup 的其他连接。</summary>
      <returns>用于连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址的共享模式。</returns>
    </member>
    <member name="P:Windows.Devices.I2c.I2cConnectionSettings.SlaveAddress">
      <summary>获取或设置集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的总线地址。</summary>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的总线地址。仅支持7位寻址，因此有效的值范围是从8到119。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.I2cController">
      <summary>表示系统的 I &lt; sup &gt; 2 &lt;/sup &gt; C 控制器。</summary>
    </member>
    <member name="M:Windows.Devices.I2c.I2cController.GetControllersAsync(Windows.Devices.I2c.Provider.II2cProvider)">
      <summary>获取系统上的所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 控制器。</summary>
      <param name="provider">I &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序用于系统上的控制器。</param>
      <returns>如果该方法成功完成，它将返回一个值列表，这些值表示系统上的可用 I &lt; sup &gt; 2 &lt;/sup &gt; C 控制器。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cController.GetDefaultAsync">
      <summary>获取系统上 &lt; sup &gt; 2 &lt;/sup &gt; C 控制器的默认 I。</summary>
      <returns>默认 I &lt; sup &gt; 2 &lt;/sup &gt; 系统上的 C 控制器，如果系统没有 I &lt; &gt; &lt; &gt;，则为 null。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cController.GetDevice(Windows.Devices.I2c.I2cConnectionSettings)">
      <summary>获取具有指定设置的 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备。</summary>
      <param name="settings">所需的连接设置。</param>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 设备。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.I2cDevice">
      <summary>表示与集成线路上的设备的通信通道（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线。</summary>
    </member>
    <member name="P:Windows.Devices.I2c.I2cDevice.ConnectionSettings">
      <summary>获取用于与集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备进行通信的连接设置。</summary>
      <returns>用于与集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备进行通信的连接设置。</returns>
    </member>
    <member name="P:Windows.Devices.I2c.I2cDevice.DeviceId">
      <summary>获取设备的内部集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器的即插即用设备标识符。</summary>
      <returns>设备的内部集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器的即插即用设备标识符。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.Close">
      <summary>关闭与集成线路之间的连接（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备。</summary>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.FromIdAsync(System.String,Windows.Devices.I2c.I2cConnectionSettings)">
      <summary>使用指定的连接设置，使用指定的即插即用设备标识符以异步方式为集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器检索一个 I2cDevice 对象。</summary>
      <param name="deviceId">要为其创建 I2cDevice 对象的 I &lt; sup &gt; 2 &lt;/sup &gt; 的即插即用设备标识符。</param>
      <param name="settings">用于与 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线控制器进行通信的连接设置，* deviceId * 指定。</param>
      <returns>返回 I2cDevice 对象的异步操作。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.GetDeviceSelector">
      <summary>检索系统上所有集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器的高级查询语法（AQS）字符串。可以将此字符串与 DeviceInformation. FindAllAsync 方法一起使用，以获取这些总线控制器的 DeviceInformation 对象。</summary>
      <returns>系统上所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线控制器的 AQS 字符串，你可以使用 DeviceInformation FindAllAsync 方法获取这些总线控制器的 DeviceInformation 对象。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.GetDeviceSelector(System.String)">
      <summary>检索具有指定友好名称的集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线的高级查询语法（AQS）字符串。可以将此字符串与 DeviceInformation. FindAllAsync 方法一起使用，以获取该总线的 DeviceInformation 对象。</summary>
      <param name="friendlyName">要获取 AQS 字符串的特定硬件平台上的特定 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线的友好名称。</param>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 总线的 AQS 字符串，* friendlyName * 指定，可与 DeviceInformation. FindAllAsync 方法一起使用来获取该总线的 DeviceInformation 对象。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.Read(System.Byte[])">
      <summary>从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线，读取设备连接到指定缓冲区的数据。</summary>
      <param name="buffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.ReadPartial(System.Byte[])">
      <summary>从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线（其中，设备连接到指定的缓冲区）中读取数据，并返回可用于错误处理的操作是否成功的信息。</summary>
      <param name="buffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
      <returns>一个结构，它包含有关读取操作是否成功以及操作读取到缓冲区中的实际字节数的信息。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.Write(System.Byte[])">
      <summary>基于用于创建 I2cDevice 对象的 I2cConnectionSetting s 对象中指定的总线地址，将数据写入到设备所连接的内部集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线。</summary>
      <param name="buffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.WritePartial(System.Byte[])">
      <summary>将数据写入到连接到设备的集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线上，并返回可用于错误处理的操作是否成功的信息。</summary>
      <param name="buffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
      <returns>一个结构，其中包含有关写入操作是否成功以及操作写入缓冲区的实际字节数的信息。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.WriteRead(System.Byte[],System.Byte[])">
      <summary>执行原子操作，将数据写入数据，然后从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线（在该设备已连接）中读取数据，并在写入和读取操作之间发送重新启动条件。</summary>
      <param name="writeBuffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
      <param name="readBuffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
    </member>
    <member name="M:Windows.Devices.I2c.I2cDevice.WriteReadPartial(System.Byte[],System.Byte[])">
      <summary>执行原子操作，以便将数据写入数据，然后从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线上读取数据，并返回可用于错误处理的操作是否成功的信息。</summary>
      <param name="writeBuffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
      <param name="readBuffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
      <returns>一个结构，其中包含有关操作的读取和写入部分是否成功以及操作写入的实际字节数与操作所读取的实际字节数之和。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.I2cSharingMode">
      <summary>介绍可用于连接到集成线路的模式（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线地址。这些模式确定连接到 i &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址时，是否可以在连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址时打开其他连接。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cSharingMode.Exclusive">
      <summary>以独占方式连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址，以便在保持连接状态时，不会再连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址。此模式是默认模式。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cSharingMode.Shared">
      <summary>在共享模式下连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址，以便在保持连接状态时，可以通过其他方式连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.I2cTransferResult">
      <summary>提供有关数据传输 ReadPartial、WritePartial 或 WriteReadPartial 方法是否成功以及方法传输的实际字节数的信息。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferResult.BytesTransferred">
      <summary>操作实际传输的实际字节数。下表描述了此值对于每个方法的含义。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferResult.Status">
      <summary>一个枚举值，该值指示读取或写入操作是否传输了该方法请求的字节数，或完全传输未成功的原因。对于 WriteReadPartial，该值指示是否已完全传输写入和读取操作的数据。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.I2cTransferStatus">
      <summary>描述数据是传输已成功执行 ReadPartial、WritePartial 或 WriteReadPartial 方法还是提供传输未成功的原因。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferStatus.ClockStretchTimeout">
      <summary>由于时钟过长，导致传输失败。确保时钟线路未保持较低。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferStatus.FullTransfer">
      <summary>数据已全部传输。对于 WriteReadPartial，写入和读取操作的数据都已完全传输。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferStatus.PartialTransfer">
      <summary>I &lt; sup &gt; 2 &lt;/sup &gt; C 设备在传输所有数据之前，会对数据传输进行逆向确认。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferStatus.SlaveAddressNotAcknowledged">
      <summary>总线地址未确认。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.I2cTransferStatus.UnknownError">
      <summary>传输失败，原因未知。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.II2cDeviceStatics">
      <summary>提供打开集成线路上的设备的通信通道的方法（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线。</summary>
    </member>
    <member name="M:Windows.Devices.I2c.II2cDeviceStatics.FromIdAsync(System.String,Windows.Devices.I2c.I2cConnectionSettings)">
      <summary>使用指定的连接设置，使用指定的即插即用设备标识符以异步方式为集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器检索一个 I2cDevice 对象。</summary>
      <param name="deviceId">要为其创建 I2cDevice 对象的 I &lt; sup &gt; 2 &lt;/sup &gt; 的即插即用设备标识符。</param>
      <param name="settings">用于与 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线控制器进行通信的连接设置，* deviceId * 指定。</param>
      <returns>返回 I2cDevice 对象的异步操作。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.II2cDeviceStatics.GetDeviceSelector">
      <summary>检索系统上所有集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器的高级查询语法（AQS）字符串。可以将此字符串与 DeviceInformation. FindAllAsync 方法一起使用，以获取这些总线控制器的 DeviceInformation 对象。</summary>
      <returns>系统上所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线控制器的 AQS 字符串，你可以使用 DeviceInformation FindAllAsync 方法获取这些总线控制器的 DeviceInformation 对象。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.II2cDeviceStatics.GetDeviceSelector(System.String)">
      <summary>检索具有指定友好名称的集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线的高级查询语法（AQS）字符串。可以将此字符串与 DeviceInformation. FindAllAsync 方法一起使用，以获取该总线的 DeviceInformation 对象。</summary>
      <param name="friendlyName">要获取 AQS 字符串的特定硬件平台上的特定 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线的友好名称。</param>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 总线的 AQS 字符串，* friendlyName * 指定，可与 DeviceInformation. FindAllAsync 方法一起使用来获取该总线的 DeviceInformation 对象。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.II2cControllerProvider">
      <summary>表示所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 控制器共有的属性和方法。</summary>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cControllerProvider.GetDeviceProvider(Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings)">
      <summary>获取具有指定设置的 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备提供程序。</summary>
      <param name="settings">所需的设置。</param>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 设备提供程序。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.II2cDeviceProvider">
      <summary>表示对所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备提供程序通用的方法。</summary>
    </member>
    <member name="P:Windows.Devices.I2c.Provider.II2cDeviceProvider.DeviceId">
      <summary>获取设备的内部集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器的即插即用设备标识符。</summary>
      <returns>设备的内部集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线控制器的即插即用设备标识符。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cDeviceProvider.Read(System.Byte[])">
      <summary>从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线，读取设备连接到指定缓冲区的数据。</summary>
      <param name="buffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cDeviceProvider.ReadPartial(System.Byte[])">
      <summary>从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线（其中，设备连接到指定的缓冲区）中读取数据，并返回可用于错误处理的操作是否成功的信息。</summary>
      <param name="buffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
      <returns>一个结构，它包含有关读取操作是否成功以及操作读取到缓冲区中的实际字节数的信息。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cDeviceProvider.Write(System.Byte[])">
      <summary>将数据写入到连接到设备的集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线。</summary>
      <param name="buffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cDeviceProvider.WritePartial(System.Byte[])">
      <summary>将数据写入到连接到设备的集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线上，并返回可用于错误处理的操作是否成功的信息。</summary>
      <param name="buffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
      <returns>一个结构，其中包含有关写入操作是否成功以及操作写入缓冲区的实际字节数的信息。</returns>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cDeviceProvider.WriteRead(System.Byte[],System.Byte[])">
      <summary>执行原子操作，将数据写入数据，然后从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线（在该设备已连接）中读取数据，并在写入和读取操作之间发送重新启动条件。</summary>
      <param name="writeBuffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
      <param name="readBuffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cDeviceProvider.WriteReadPartial(System.Byte[],System.Byte[])">
      <summary>执行原子操作，以便将数据写入数据，然后从集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线上读取数据，并返回可用于错误处理的操作是否成功的信息。</summary>
      <param name="writeBuffer">包含要写入到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的数据的缓冲区。此数据不应包含总线地址。</param>
      <param name="readBuffer">要将数据从 I &lt; sup 读入的缓冲区 &gt; 2 &lt;/sup &gt; C 总线。缓冲区的长度决定了要从设备请求的数据量。</param>
      <returns>一个结构，其中包含有关操作的读取和写入部分是否成功以及操作写入的实际字节数与操作所读取的实际字节数之和。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.II2cProvider">
      <summary>表示对所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 提供程序通用的操作。</summary>
    </member>
    <member name="M:Windows.Devices.I2c.Provider.II2cProvider.GetControllersAsync">
      <summary>获取系统上的所有 I &lt; sup &gt; 2 &lt;/sup &gt; C 控制器。</summary>
      <returns>如果该方法成功完成，它将返回一个值列表，这些值表示系统上的可用 I &lt; sup &gt; 2 &lt;/sup &gt; C 控制器。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.ProviderI2cBusSpeed">
      <summary>描述可用于连接到集成线路的总线速度（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备。总线速度是指在访问设备时，对 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线进行时钟的频率。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cBusSpeed.FastMode">
      <summary>速度为 400 kHz。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cBusSpeed.StandardMode">
      <summary>100千赫（kHz）的标准速度。此速度是默认值。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings">
      <summary>表示要用于集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的连接设置。</summary>
    </member>
    <member name="P:Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.BusSpeed">
      <summary>获取或设置用于连接到集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的总线速度。总线速度是指在访问设备时，对 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线进行时钟的频率。</summary>
      <returns>用于连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的总线速度。</returns>
    </member>
    <member name="P:Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.SharingMode">
      <summary>获取或设置用于连接到集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线地址的共享模式。此模式确定连接到 I &lt; sup &gt; &lt; &gt;/sup 时，是否可以打开与 I &lt; sup &gt; 2 &lt; &gt;/sup 的其他连接。</summary>
      <returns>用于连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址的共享模式。</returns>
    </member>
    <member name="P:Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.SlaveAddress">
      <summary>获取或设置集成线路（I &lt; sup &gt; 2 &lt;/sup &gt; C）设备的总线地址。</summary>
      <returns>I &lt; sup &gt; 2 &lt;/sup &gt; C 设备的总线地址。仅支持7位寻址，因此有效的值范围是从8到119。</returns>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.ProviderI2cSharingMode">
      <summary>介绍可用于连接到集成线路的模式（I &lt; sup &gt; 2 &lt;/sup &gt; C）总线地址。这些模式确定连接到 i &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址时，是否可以在连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址时打开其他连接。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cSharingMode.Exclusive">
      <summary>以独占方式连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址，以便在保持连接状态时，不会再连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址。此模式是默认模式。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cSharingMode.Shared">
      <summary>在共享模式下连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址，以便在保持连接状态时，可以通过其他方式连接到 I &lt; sup &gt; 2 &lt;/sup &gt; C 总线地址。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.ProviderI2cTransferResult">
      <summary>提供有关数据传输 ReadPartial、WritePartial 或 WriteReadPartial 方法是否成功以及方法传输的实际字节数的信息。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cTransferResult.BytesTransferred">
      <summary>操作实际传输的实际字节数。下表描述了此值对于每个方法的含义。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cTransferResult.Status">
      <summary>一个枚举值，该值指示读取或写入操作是否传输了该方法请求的字节数，或完全传输未成功的原因。对于 WriteReadPartial，该值指示是否已完全传输写入和读取操作的数据。</summary>
    </member>
    <member name="T:Windows.Devices.I2c.Provider.ProviderI2cTransferStatus">
      <summary>描述数据是传输已成功执行 ReadPartial、WritePartial 或 WriteReadPartial 方法还是提供传输未成功的原因。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cTransferStatus.FullTransfer">
      <summary>数据已全部传输。对于 WriteReadPartial，写入和读取操作的数据都已完全传输。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cTransferStatus.PartialTransfer">
      <summary>I &lt; sup &gt; 2 &lt;/sup &gt; C 设备在传输所有数据之前，会对数据传输进行逆向确认。</summary>
    </member>
    <member name="F:Windows.Devices.I2c.Provider.ProviderI2cTransferStatus.SlaveAddressNotAcknowledged">
      <summary>总线地址未确认。</summary>
    </member>
    <member name="T:Windows.Devices.Pwm.PwmController">
      <summary>表示连接到系统的 PWM 控制器。</summary>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmController.ActualFrequency">
      <summary>获取 PWM 的实际频率。</summary>
      <returns>以 Hz 为间隔的频率。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmController.MaxFrequency">
      <summary>获取控制器提供的最大频率。</summary>
      <returns>以 Hz 为间隔的最大频率。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmController.MinFrequency">
      <summary>获取控制器提供的最小频率。</summary>
      <returns>最小频率（以 Hz 为赫兹）。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmController.PinCount">
      <summary>获取系统上可用的 pin 数目。</summary>
      <returns>Pin 的数目。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.FromIdAsync(System.String)">
      <summary>根据给定的 DeviceInformation ID 初始化 PWM 控制器实例。</summary>
      <param name="deviceId">获取的 DeviceInformation ID。</param>
      <returns>
      </returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.GetControllersAsync(Windows.Devices.Pwm.Provider.IPwmProvider)">
      <summary>以异步方式获取系统上的所有控制器。</summary>
      <param name="provider">系统上的 PWM 提供程序。</param>
      <returns>如果方法成功完成，它将返回一个值列表，这些值表示系统上可用的控制器。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.GetDefaultAsync">
      <summary>获取系统上的默认 PWM 控制器。</summary>
      <returns>系统上的默认 PWM 控制器，如果系统没有 PWM 控制器，则为 null。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.GetDeviceSelector">
      <summary>检索系统上所有 PWM 控制器的高级查询语法（AQS）字符串。可以将此字符串与 DeviceInformation. FindAllAsync 方法一起使用，以获取这些控制器的 DeviceInformation 对象。</summary>
      <returns>
      </returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.GetDeviceSelector(System.String)">
      <summary>检索具有指定友好名称的 PWM 控制器的高级查询语法（AQS）字符串。可以将此字符串与 DeviceInformation. FindAllAsync 方法一起使用，以获取这些控制器的 DeviceInformation 对象。</summary>
      <param name="friendlyName">要为其获取相应 AQS 字符串的特定 PWM 控制器的友好名称。</param>
      <returns>
      </returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.OpenPin(System.Int32)">
      <summary>打开 pin 以供使用。</summary>
      <param name="pinNumber">要打开的 pin。</param>
      <returns>请求的 pin 现在可供使用。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmController.SetDesiredFrequency(System.Double)">
      <summary>设置 PWM 频率。</summary>
      <param name="desiredFrequency">然后以 Hz 为目标。</param>
      <returns>设置的实际频率。这将是由提供程序确定的最接近支持的匹配项。</returns>
    </member>
    <member name="T:Windows.Devices.Pwm.PwmPin">
      <summary>表示系统上的单个 PWM pin。</summary>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmPin.Controller">
      <summary>获取此 pin 使用的 PWM 控制器。</summary>
      <returns>控制器。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmPin.IsStarted">
      <summary>获取 pin 的已启动状态。</summary>
      <returns>如果 PWM 已在此 pin 上启动，则为 True; 否则为 false。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.PwmPin.Polarity">
      <summary>获取或设置 pin 的极性。</summary>
      <returns>Pin 极性。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmPin.Close">
      <summary>关闭与 pin 的当前连接，使其他人可以打开 pin。</summary>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmPin.GetActiveDutyCyclePercentage">
      <summary>检索此 pin 的关税周期百分比。</summary>
      <returns>0.0 和1.0 之间的关税周期百分比。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmPin.SetActiveDutyCyclePercentage(System.Double)">
      <summary>设置此 pin 的关税周期百分比。</summary>
      <param name="dutyCyclePercentage">所需的关税周期百分比，以介于0.0 和1.0 之间的值表示。</param>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmPin.Start">
      <summary>在此 pin 上启动 PWM。</summary>
    </member>
    <member name="M:Windows.Devices.Pwm.PwmPin.Stop">
      <summary>停止此插针上的 PWM。</summary>
    </member>
    <member name="T:Windows.Devices.Pwm.PwmPulsePolarity">
      <summary>描述 PWM 信号应在哪个极性开始。</summary>
    </member>
    <member name="F:Windows.Devices.Pwm.PwmPulsePolarity.ActiveHigh">
      <summary>将 PWM 信号配置为以活动高状态启动。</summary>
    </member>
    <member name="F:Windows.Devices.Pwm.PwmPulsePolarity.ActiveLow">
      <summary>将 PWM 信号配置为在活动低状态下启动。</summary>
    </member>
    <member name="T:Windows.Devices.Pwm.Provider.IPwmControllerProvider">
      <summary>表示所有 PWM 控制器共有的属性和方法。</summary>
    </member>
    <member name="P:Windows.Devices.Pwm.Provider.IPwmControllerProvider.ActualFrequency">
      <summary>获取 PWM 的实际频率。</summary>
      <returns>以 Hz 为间隔的频率。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.Provider.IPwmControllerProvider.MaxFrequency">
      <summary>获取控制器提供的最大频率。</summary>
      <returns>以 Hz 为间隔的最大频率。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.Provider.IPwmControllerProvider.MinFrequency">
      <summary>获取控制器提供的最小频率。</summary>
      <returns>最小频率（以 Hz 为赫兹）。</returns>
    </member>
    <member name="P:Windows.Devices.Pwm.Provider.IPwmControllerProvider.PinCount">
      <summary>获取系统上可用的 PWM 针的数目。</summary>
      <returns>可用的 pin 数目。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmControllerProvider.AcquirePin(System.Int32)">
      <summary>获取指定的 pin 并打开该 pin 以供使用。</summary>
      <param name="pin">打开 PWM 连接到的 pin。</param>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmControllerProvider.DisablePin(System.Int32)">
      <summary>停止此插针上的 PWM。</summary>
      <param name="pin">要在其上停止 PWM 信号的固定。</param>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmControllerProvider.EnablePin(System.Int32)">
      <summary>在指定的 pin 上启动 PWM 信号。</summary>
      <param name="pin">要在其上启动 PWM 信号的固定。</param>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmControllerProvider.ReleasePin(System.Int32)">
      <summary>释放到指定的 pin 的连接，并将该 pin 提供给其他人使用。</summary>
      <param name="pin">要释放的 pin 码。</param>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmControllerProvider.SetDesiredFrequency(System.Double)">
      <summary>设置所需的 PWM 频率。</summary>
      <param name="frequency">所需的频率（以 Hz 为间隔）。</param>
      <returns>设置为上述值后的实际 PWM 频率。这将是由提供程序确定的最接近支持的匹配项。</returns>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmControllerProvider.SetPulseParameters(System.Int32,System.Double,System.Boolean)">
      <summary>为 pin、关税周期和极性设置 PWM 参数。</summary>
      <param name="pin">指示将这些值应用到哪些 pin。</param>
      <param name="dutyCycle">关税循环百分比，其值介于0和100（含）之间。</param>
      <param name="invertPolarity">如果应反转 pin 极性，则为 True; 否则为 false。</param>
    </member>
    <member name="T:Windows.Devices.Pwm.Provider.IPwmProvider">
      <summary>表示对所有 PWM 提供程序通用的方法。</summary>
    </member>
    <member name="M:Windows.Devices.Pwm.Provider.IPwmProvider.GetControllers">
      <summary>获取系统上可用的控制器。</summary>
      <returns>返回系统上可用的 PWM 控制器的列表。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.ISpiDeviceStatics">
      <summary>表示 SPI 设备通用的 SPI 设备统计信息。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.ISpiDeviceStatics.FromIdAsync(System.String,Windows.Devices.Spi.SpiConnectionSettings)">
      <summary>打开一个设备，其中提供了连接设置。</summary>
      <param name="busId">总线的 id。</param>
      <param name="settings">连接设置。</param>
      <returns>SPI 设备。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.ISpiDeviceStatics.GetBusInfo(System.String)">
      <summary>检索有关某一总线的信息。</summary>
      <param name="busId">总线的 id。</param>
      <returns>请求的总线信息。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.ISpiDeviceStatics.GetDeviceSelector">
      <summary>获取在系统上找到的所有 SPI 总线。</summary>
      <returns>包含系统中所有总线的字符串。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.ISpiDeviceStatics.GetDeviceSelector(System.String)">
      <summary>获取系统中找到的与输入参数匹配的所有 SPI 总线。</summary>
      <param name="friendlyName">指定所需总线的标识名称的输入参数。这通常对应于示意的名称。</param>
      <returns>包含名称中包含输入的所有总线的字符串。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.SpiBusInfo">
      <summary>表示有关 SPI 总线的信息。</summary>
    </member>
    <member name="P:Windows.Devices.Spi.SpiBusInfo.ChipSelectLineCount">
      <summary>获取总线上可用的芯片选择线数。</summary>
      <returns>芯片选择行数。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiBusInfo.MaxClockFrequency">
      <summary>总线的最大时钟周期频率。</summary>
      <returns>时钟周期（以赫兹为赫兹）。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiBusInfo.MinClockFrequency">
      <summary>总线的最小时钟周期频率。</summary>
      <returns>时钟周期（以赫兹为赫兹）。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiBusInfo.SupportedDataBitLengths">
      <summary>获取可用于传输数据的总线上的位长度。</summary>
      <returns>支持的数据长度。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.SpiConnectionSettings">
      <summary>表示与 SpiDevice 的连接的设置。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.SpiConnectionSettings.#ctor(System.Int32)">
      <summary>初始化 SpiConnectionSettings 的新实例。</summary>
      <param name="chipSelectLine">要在其上进行连接的芯片选择线条。</param>
    </member>
    <member name="P:Windows.Devices.Spi.SpiConnectionSettings.ChipSelectLine">
      <summary>获取或设置与 SPI 设备连接的芯片选择线。</summary>
      <returns>芯片选择线条。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiConnectionSettings.ClockFrequency">
      <summary>获取或设置连接的时钟频率。</summary>
      <returns>时钟频率的值（以 Hz 为赫兹）。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiConnectionSettings.DataBitLength">
      <summary>获取或设置此连接上的数据的位长度。</summary>
      <returns>数据位长度。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiConnectionSettings.Mode">
      <summary>获取或设置此连接的 SpiMode。</summary>
      <returns>通信模式。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiConnectionSettings.SharingMode">
      <summary>获取或设置 SPI 连接的共享模式。</summary>
      <returns>共享模式。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.SpiController">
      <summary>表示系统上的 SPI 控制器。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.SpiController.GetControllersAsync(Windows.Devices.Spi.Provider.ISpiProvider)">
      <summary>获取系统上的所有 SPI 控制器。</summary>
      <param name="provider">系统上控制器的 SPI 提供程序。</param>
      <returns>如果方法成功完成，它将返回一个值列表，这些值表示系统上的可用 SPI 控制器。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiController.GetDefaultAsync">
      <summary>获取系统上的默认 SPI 控制器。</summary>
      <returns>系统上的默认 SPI 控制器，如果系统没有 SPI 控制器，则为 null。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiController.GetDevice(Windows.Devices.Spi.SpiConnectionSettings)">
      <summary>获取具有指定设置的 SPI 设备。</summary>
      <param name="settings">所需的连接设置。</param>
      <returns>SPI 设备。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.SpiDevice">
      <summary>表示通过 SPI 总线连接的设备。</summary>
    </member>
    <member name="P:Windows.Devices.Spi.SpiDevice.ConnectionSettings">
      <summary>获取设备的连接设置。</summary>
      <returns>连接设置。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.SpiDevice.DeviceId">
      <summary>获取与设备关联的唯一 ID。</summary>
      <returns>ID。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.Close">
      <summary>关闭与设备的连接。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.FromIdAsync(System.String,Windows.Devices.Spi.SpiConnectionSettings)">
      <summary>打开一个设备，其中提供了连接设置。</summary>
      <param name="busId">总线的 id。</param>
      <param name="settings">连接设置。</param>
      <returns>要求的 SPI 设备。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.GetBusInfo(System.String)">
      <summary>检索有关某一总线的信息。</summary>
      <param name="busId">总线的 id。</param>
      <returns>请求的总线信息。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.GetDeviceSelector">
      <summary>获取在系统上找到的所有 SPI 总线。</summary>
      <returns>包含系统中找到的所有总线的字符串。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.GetDeviceSelector(System.String)">
      <summary>获取系统中找到的与输入参数匹配的所有 SPI 总线。</summary>
      <param name="friendlyName">指定所需总线的标识名称的输入参数。这通常对应于示意的名称。</param>
      <returns>包含名称中包含输入的所有总线的字符串。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.Read(System.Byte[])">
      <summary>从连接的设备读取。</summary>
      <param name="buffer">包含从设备读取的数据的数组。</param>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.TransferFullDuplex(System.Byte[],System.Byte[])">
      <summary>使用全双工通信系统传输数据。全双工允许主节点和从属服务器同时进行通信。</summary>
      <param name="writeBuffer">包含要写入设备的数据的数组。</param>
      <param name="readBuffer">包含从设备读取的数据的数组。</param>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.TransferSequential(System.Byte[],System.Byte[])">
      <summary>按顺序将数据传输到设备。</summary>
      <param name="writeBuffer">包含要写入设备的数据的数组。</param>
      <param name="readBuffer">包含从设备读取的数据的数组。</param>
    </member>
    <member name="M:Windows.Devices.Spi.SpiDevice.Write(System.Byte[])">
      <summary>写入已连接设备。</summary>
      <param name="buffer">包含要写入设备的数据的数组。</param>
    </member>
    <member name="T:Windows.Devices.Spi.SpiMode">
      <summary>定义 SPI 通信模式。通信模式定义了在其上运行主输出行的时钟边缘、主行样本和信号时钟的信号稳定级别（名为 SCLK）。每个模式都使用一对称为时钟极性（CPOL）和时钟阶段（CPHA）的参数进行定义。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.SpiMode.Mode0">
      <summary>CPOL = 0，CPHA = 0。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.SpiMode.Mode1">
      <summary>CPOL = 0，CPHA = 1。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.SpiMode.Mode2">
      <summary>CPOL = 1，CPHA = 0。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.SpiMode.Mode3">
      <summary>CPOL = 1，CPHA = 1。</summary>
    </member>
    <member name="T:Windows.Devices.Spi.SpiSharingMode">
      <summary>定义 SPI 总线的共享模式。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.SpiSharingMode.Exclusive">
      <summary>不共享 SPI 总线段。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.SpiSharingMode.Shared">
      <summary>SPI 总线是共享的。</summary>
    </member>
    <member name="T:Windows.Devices.Spi.Provider.ISpiControllerProvider">
      <summary>表示对所有 SPI 控制器通用的操作。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ISpiControllerProvider.GetDeviceProvider(Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings)">
      <summary>获取具有指定设置的 SPI 设备。</summary>
      <param name="settings">所需的连接设置。</param>
      <returns>SPI 设备。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.Provider.ISpiDeviceProvider">
      <summary>表示通过 SPI 总线连接的设备的常见操作。</summary>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ISpiDeviceProvider.ConnectionSettings">
      <summary>获取设备的连接设置。</summary>
      <returns>连接设置。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ISpiDeviceProvider.DeviceId">
      <summary>获取与设备关联的唯一 ID。</summary>
      <returns>设备 ID。</returns>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ISpiDeviceProvider.Read(System.Byte[])">
      <summary>从连接的设备读取。</summary>
      <param name="buffer">包含从设备读取的数据的数组。</param>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ISpiDeviceProvider.TransferFullDuplex(System.Byte[],System.Byte[])">
      <summary>使用全双工通信系统传输数据。全双工允许主节点和从属服务器同时进行通信。</summary>
      <param name="writeBuffer">包含要写入设备的数据的数组。</param>
      <param name="readBuffer">包含从设备读取的数据的数组。</param>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ISpiDeviceProvider.TransferSequential(System.Byte[],System.Byte[])">
      <summary>按顺序将数据传输到设备。</summary>
      <param name="writeBuffer">包含要写入设备的数据的数组。</param>
      <param name="readBuffer">包含从设备读取的数据的数组。</param>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ISpiDeviceProvider.Write(System.Byte[])">
      <summary>写入已连接设备。</summary>
      <param name="buffer">包含要写入设备的数据的数组。</param>
    </member>
    <member name="T:Windows.Devices.Spi.Provider.ISpiProvider">
      <summary>表示 SPI 控制器提供程序所共有的操作。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ISpiProvider.GetControllersAsync">
      <summary>获取提供程序的系统上的所有 SPI 控制器。</summary>
      <returns>如果方法成功完成，它将返回一个值列表，这些值表示系统上的可用 SPI 控制器。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings">
      <summary>表示与设备的连接的提供程序设置。</summary>
    </member>
    <member name="M:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.#ctor(System.Int32)">
      <summary>初始化 ProviderSpiConnectionSettings 的新实例。</summary>
      <param name="chipSelectLine">要在其上进行连接的芯片选择线条。</param>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ChipSelectLine">
      <summary>获取或设置与 SPI 设备连接的芯片选择线。</summary>
      <returns>芯片选择线条。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ClockFrequency">
      <summary>获取或设置连接的时钟频率。</summary>
      <returns>时钟频率的值（以 Hz 为赫兹）。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.DataBitLength">
      <summary>获取或设置此连接上的数据的位长度。</summary>
      <returns>数据位长度。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.Mode">
      <summary>获取或设置此连接的 ProviderSpiMode。</summary>
      <returns>通信模式。</returns>
    </member>
    <member name="P:Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.SharingMode">
      <summary>获取或设置 SPI 连接的共享模式。</summary>
      <returns>共享模式。</returns>
    </member>
    <member name="T:Windows.Devices.Spi.Provider.ProviderSpiMode">
      <summary>定义 SPI 通信模式。通信模式定义了在其上运行主输出行的时钟边缘、主行样本和信号时钟的信号稳定级别（名为 SCLK）。每个模式都使用一对称为时钟极性（CPOL）和时钟阶段（CPHA）的参数进行定义。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.Provider.ProviderSpiMode.Mode0">
      <summary>CPOL = 0，CPHA = 0。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.Provider.ProviderSpiMode.Mode1">
      <summary>CPOL = 0，CPHA = 1。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.Provider.ProviderSpiMode.Mode2">
      <summary>CPOL = 1，CPHA = 0。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.Provider.ProviderSpiMode.Mode3">
      <summary>CPOL = 1，CPHA = 1。</summary>
    </member>
    <member name="T:Windows.Devices.Spi.Provider.ProviderSpiSharingMode">
      <summary>定义 SPI 总线的共享模式。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.Provider.ProviderSpiSharingMode.Exclusive">
      <summary>不共享 SPI 总线段。</summary>
    </member>
    <member name="F:Windows.Devices.Spi.Provider.ProviderSpiSharingMode.Shared">
      <summary>SPI 总线是共享的。</summary>
    </member>
  </members>
</doc>